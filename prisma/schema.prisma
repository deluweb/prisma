generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Website {
  id              String            @id @default(cuid())
  name            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  domains         String[]
  Roles           Role[]
  Users           User[]
  WebsitePlugin   WebsitePlugin[]
  WebsiteProvider WebsiteProvider[]
  WebsiteTheme    WebsiteTheme[]
}

model WebsiteProvider {
  id            String    @id @default(cuid())
  loginProvider Boolean
  enabled       Boolean   @default(true)
  scope         String[]
  variables     Json
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  websiteId     String
  providerId    String
  Accounts      Account[]
  provider      Provider  @relation(fields: [providerId], references: [id])
  website       Website   @relation(fields: [websiteId], references: [id])

  @@unique([websiteId, providerId])
}

model WebsiteTheme {
  id        String              @id @default(cuid())
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now())
  websiteId String
  themeId   String
  theme     LibraryThemeVersion @relation(fields: [themeId], references: [id])
  website   Website             @relation(fields: [websiteId], references: [id])

  @@unique([websiteId, themeId])
}

model WebsitePlugin {
  id        String               @id @default(cuid())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now())
  websiteId String
  pluginId  String
  plugin    LibraryPluginVersion @relation(fields: [pluginId], references: [id])
  website   Website              @relation(fields: [websiteId], references: [id])

  @@unique([websiteId, pluginId])
}

model Provider {
  id              String            @id @default(cuid())
  name            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  WebsiteProvider WebsiteProvider[]
}

model User {
  id                String             @id @default(cuid())
  websiteId         String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
  Accounts          Account[]
  LibraryDevelopers LibraryDeveloper[]
  Sessions          Session[]
  Website           Website            @relation(fields: [websiteId], references: [id])
  UserDataRecords   UserDataRecord[]
  Roles             Role[]             @relation("RoleToUser")
}

model UserDataRecord {
  id        String   @id @default(cuid())
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, key])
}

model Account {
  id           String          @id @default(cuid())
  token        String?
  userId       String
  providerId   String
  externalId   String
  tokenType    String?
  externalData Json?
  scope        String[]
  Provider     WebsiteProvider @relation(fields: [providerId], references: [id])
  User         User            @relation(fields: [userId], references: [id])

  @@unique([providerId, externalId])
}

model Role {
  id           String              @id @default(cuid())
  name         String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @default(now())
  websiteId    String
  default      Boolean
  locked       Boolean             @default(false)
  redirect_uri String              @default("/")
  weight       Int                 @default(0)
  Website      Website             @relation(fields: [websiteId], references: [id])
  Permisions   LibraryPermission[] @relation("LibraryPermissionToRole")
  Users        User[]              @relation("RoleToUser")

  @@unique([websiteId, weight])
  @@unique([websiteId, name])
}

model Library {
  id         String                     @id @default(cuid())
  name       String                     @unique
  sub        String                     @unique
  createdAt  DateTime                   @default(now())
  updatedAt  DateTime                   @default(now())
  Developers LibraryDeveloper[]
  Permisions LibraryPermissionVersion[]
  Plugins    LibraryPlugin[]
  Themes     LibraryTheme[]
}

model LibraryPlugin {
  id        String                 @id @default(cuid())
  name      String                 @unique
  sub       String                 @unique
  createdAt DateTime               @default(now())
  updatedAt DateTime               @default(now())
  libraryId String
  Library   Library                @relation(fields: [libraryId], references: [id])
  Versions  LibraryPluginVersion[]
}

model LibraryPluginVersion {
  id            String          @id @default(cuid())
  version       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  pluginId      String
  Plugin        LibraryPlugin   @relation(fields: [pluginId], references: [id])
  WebsitePlugin WebsitePlugin[]

  @@unique([pluginId, version])
}

model LibraryTheme {
  id        String                @id @default(cuid())
  name      String                @unique
  sub       String                @unique
  createdAt DateTime              @default(now())
  updatedAt DateTime              @default(now())
  libraryId String
  Library   Library               @relation(fields: [libraryId], references: [id])
  Versions  LibraryThemeVersion[]
}

model LibraryThemeVersion {
  id           String         @id @default(cuid())
  version      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  themeId      String
  Theme        LibraryTheme   @relation(fields: [themeId], references: [id])
  WebsiteTheme WebsiteTheme[]

  @@unique([themeId, version])
}

model LibraryDeveloper {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String
  libraryId String
  Library   Library  @relation(fields: [libraryId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, libraryId])
}

model LibraryPermissionVersion {
  id         String              @id @default(cuid())
  version    String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @default(now())
  libraryId  String
  Permisions LibraryPermission[]
  Library    Library             @relation(fields: [libraryId], references: [id])

  @@unique([libraryId, version])
}

model LibraryPermission {
  id                 String                   @id @default(cuid())
  name               String
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @default(now())
  permisionVersionId String
  PermisionVersion   LibraryPermissionVersion @relation(fields: [permisionVersionId], references: [id])
  Roles              Role[]                   @relation("LibraryPermissionToRole")

  @@unique([permisionVersionId, name])
}

model Session {
  token     String   @id
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String
  User      User     @relation(fields: [userId], references: [id])
}
